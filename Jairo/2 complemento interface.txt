Como você deve ter lido no link que eu passei,as classes que implementam 
uma interface são obrigadas a implementar seus métodos! 

Então,um exempo bem simples para entender melhor:

Você esta criando um módulo  de carro.
Todos os carros tem caracteristicas comuns:
Mover-se,parar etc..

Então vc cria um novo modelo de carro e esse carro,claro,obrigatoriamente
tem que mover,parar entre outras coisas(padrão de carro)

Então,quando eu implemento uma interface,eu OBRIGO a quem ta implementando a pegar 
todos os métodos da interface.
>Não sabemos como isso sera feito,apenas que DEVERÁ ser feito e precisa garantir que seja feito.

Nosso exemplo é pequeno,mais imagina um mundo de coisa que um carro precisa fazer!
Você como programador,vai lembrar de tudo ? Vai ficar olhando documentação para ver o 
que é obrigatório a implementar ?

Você usa uma interface que já trás isso para você.

Todo carro anda,correto? Mas o carro automatico,mecanico,eletrico,cada um tem sua 
implementação especifica para andar! MAS NO FINAL,TODOS ANDAM.

Outro exemplo que gosto de utilizar:

Calculos de figuras geometricas !

Você tem ali varias possibilidades de calculo.
Uma delas ,calculo de área !

Calcular a área do quadrado é diferente de calcuçar a área do triangulo !

Então eu tenho uma interface com todos os calculos de figuras geometricas possiveis,mas cada
um tem seu jeito de ser implementado!

Então ficaria:

Uma Interface FIGURAGEOMETRICA: com todos os calculos possiveis.

E uma classe TRIANGULO que implementa FIGURAGEOMETRICA.
Uma classe QUADRADO que implementa FIGURAGEOMETRICA 
e assim por dianta.

Ou seja,todos são figuras geometricas,que possuem os mesmos métodos calcularArea(),mas 
cada figura tem seu jeito de calcular!



