public List<Task> getFindTaskByIdprojec(int id) {
        String sql = "SELECT * FROM tasks where idProject = ?";

        List<Task> tasks = new ArrayList<>();

        Connection conn = null;
        PreparedStatement stmt = null;

        //Classe que vai recuperar os dados do banco de dados
        ResultSet rset = null;

        try {
            conn = ConnectionFactory.getConnection();
            stmt = conn.prepareStatement(sql);

            stmt.setInt(1, id); //pega o id do parametro para consulta sql,ou seja,joga no ?

            rset = stmt.executeQuery();

            //Enquanto existir dados no banco de dados, fa a
            while (rset.next()) {

                Task task = new Task();

                task.setId(rset.getInt("id"));
                task.setIdProject(rset.getInt("idProject"));
                task.setName(rset.getString("nome"));
                task.setDescription(rset.getString("descricao"));
                task.setIsCompleted(rset.getBoolean("completado"));
                task.setNotes(rset.getString("notas"));
                task.setDeadline(rset.getDate("prazo"));
                task.setCreatedAt(rset.getDate("data_criacao"));
                task.setUpdatedAt(rset.getDate("data_atualizacao"));

                //Adiciono o contato recuperado, a lista de contatos
                tasks.add(task);
            }
        } catch (SQLException ex) {
            throw new RuntimeException("Erro ao buscar as tarefas", ex);
        } finally {
            try {
                if (rset != null) {
                    rset.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                throw new RuntimeException("Erro ao fechar a conex√£o", ex);
            }
        }
        return tasks;
    }